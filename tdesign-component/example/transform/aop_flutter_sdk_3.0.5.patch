From ab0a336f443c1c9e6304734e902994d6488ca380 Mon Sep 17 00:00:00 2001
From: skylerpfli <skylerpfli@tencent.com>
Date: Wed, 17 Aug 2022 19:31:56 +0800
Subject: [PATCH] =?UTF-8?q?aop=E6=8F=90=E4=BA=A4?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 packages/flutter_tools/bin/flutter_tools.dart |   1 +
 packages/flutter_tools/lib/src/compile.dart   |  12 +-
 packages/flutter_tools/lib/src/hook.dart      | 112 ++++++++++++++++++
 3 files changed, 122 insertions(+), 3 deletions(-)
 create mode 100644 packages/flutter_tools/lib/src/hook.dart

diff --git a/packages/flutter_tools/bin/flutter_tools.dart b/packages/flutter_tools/bin/flutter_tools.dart
index 1cad0ded07..0643b7353c 100644
--- a/packages/flutter_tools/bin/flutter_tools.dart
+++ b/packages/flutter_tools/bin/flutter_tools.dart
@@ -7,5 +7,6 @@
 import 'package:flutter_tools/executable.dart' as executable;
 
 void main(List<String> args) {
+  print('FlutterAop execute command: ${args.join(' ')}');
   executable.main(args);
 }
diff --git a/packages/flutter_tools/lib/src/compile.dart b/packages/flutter_tools/lib/src/compile.dart
index 1198d344e4..a52097b3a0 100644
--- a/packages/flutter_tools/lib/src/compile.dart
+++ b/packages/flutter_tools/lib/src/compile.dart
@@ -18,6 +18,7 @@ import 'base/logger.dart';
 import 'base/platform.dart';
 import 'build_info.dart';
 import 'convert.dart';
+import 'hook.dart';
 
 /// The target model describes the set of core libraries that are available within
 /// the SDK.
@@ -240,9 +241,13 @@ class KernelCompiler {
     required List<String> dartDefines,
     required PackageConfig packageConfig,
   }) async {
-    final String frontendServer = _artifacts.getArtifactPath(
-      Artifact.frontendServerSnapshotForEngineDartSdk
-    );
+    /// 插桩工程，有限
+    String? frontendServer = await TransformHook.fetchTransformSnapshot();
+    print('FlutterAop isEnable: ${frontendServer != null}');
+
+    /// 默认
+    frontendServer ??= _artifacts.getArtifactPath(Artifact.frontendServerSnapshotForEngineDartSdk);
+
     // This is a URI, not a file path, so the forward slash is correct even on Windows.
     if (!sdkRoot.endsWith('/')) {
       sdkRoot = '$sdkRoot/';
@@ -325,6 +330,7 @@ class KernelCompiler {
       mainUri,
     ];
 
+    print('FlutterAop compile command: ${command.join(' ')}');
     _logger.printTrace(command.join(' '));
     final Process server = await _processManager.start(command);
 
diff --git a/packages/flutter_tools/lib/src/hook.dart b/packages/flutter_tools/lib/src/hook.dart
new file mode 100644
index 0000000000..849cf94a37
--- /dev/null
+++ b/packages/flutter_tools/lib/src/hook.dart
@@ -0,0 +1,112 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+import 'dart:io';
+
+import 'package:package_config/package_config.dart';
+
+import 'artifacts.dart';
+import 'base/common.dart';
+import 'base/file_system.dart';
+import 'build_system/build_system.dart';
+import 'build_system/targets/common.dart';
+import 'cache.dart';
+import 'compile.dart';
+import 'dart/package_map.dart';
+import 'globals.dart' as globals;
+import 'dart/pub.dart';
+
+// ignore: avoid_classes_with_only_static_members
+/// transform
+class TransformHook {
+  //snapshot名
+  static const String frontendServerDartSnapshot = 'frontend_server.dart.snapshot';
+
+  //传入.package路径，获取某一依赖的路径
+  static Future<Directory?> _getPackagePathFromConfig(String packageConfigPath, String packageName) async {
+    final PackageConfig packageConfig = await loadPackageConfigWithLogging(
+      globals.fs.file(packageConfigPath),
+      logger: globals.logger,
+    );
+    if (packageConfig.packages.isNotEmpty) {
+      try {
+        final Package targetPackage = packageConfig.packages.toList().firstWhere((Package element) => element.name == packageName);
+        return globals.fs.directory(targetPackage.root.toFilePath());
+        // ignore: avoid_catches_without_on_clauses
+      } catch (e) {
+        return null;
+      }
+    }
+    return null;
+  }
+
+  //获取dart sdk依赖
+  static Future<String> getDartSdkDependency(String workingDirectory) async {
+    await pub.get(context: PubContext.createPackage, directory: workingDirectory, printProgress: false).catchError((e) {
+      print('ConchFlutter getDartSdkDependency unexpected error: $e');
+      throwToolExit('ConchFlutter getDartSdkDependency unexpected error: $e');
+    });
+    final Directory? kernelDir = await _getPackagePathFromConfig(globals.fs.path.join(workingDirectory, '.packages'), 'kernel');
+    return kernelDir?.parent.parent.uri.toString() ?? '';
+  }
+
+  //获取frontedServer路径，位于主工程/transform/lib/flutter_frontend_server目录下
+  static Future<Directory> getFlutterFrontendServerDirectory(String path) async {
+    return globals.fs.directory(globals.fs.path.join(path, 'transform', 'lib', 'flutter_frontend_server'));
+  }
+
+  //获取FlutterAop的frontend_server snapshot路径
+  static Future<String?> fetchTransformSnapshot() async {
+    final Directory currentDirectory = globals.fs.currentDirectory;
+    if (!currentDirectory.existsSync()) {
+      return null;
+    }
+    final String packagesPath = currentDirectory.absolute.path;
+
+    final Directory flutterFrontendServerDirectory = await getFlutterFrontendServerDirectory(packagesPath);
+
+    if (!(flutterFrontendServerDirectory.existsSync() &&
+        globals.fs.file(globals.fs.path.join(currentDirectory.path, 'pubspec.yaml')).existsSync() &&
+        globals.fs.file(globals.fs.path.join(currentDirectory.path, '.packages')).existsSync() &&
+        globals.fs.file(globals.fs.path.join(currentDirectory.path, 'lib', 'main.dart')).existsSync())) {
+      return null;
+    }
+
+    final String hookFlutterFrontendServerSnapshot = globals.fs.path.join(flutterFrontendServerDirectory.absolute.path, frontendServerDartSnapshot);
+
+    //每次都重新生成FrontendServerSnapshot
+    if (globals.fs.file(hookFlutterFrontendServerSnapshot).existsSync()) {
+      globals.fs.file(hookFlutterFrontendServerSnapshot).deleteSync();
+    }
+    final String dartSdkDir = await getDartSdkDependency(globals.fs.path.join(packagesPath, 'transform'));
+    final String frontendServerPackageConfigJsonFile = '${flutterFrontendServerDirectory.absolute.path}/package_config.json';
+    final String rebasedFrontendServerPackageConfigJsonFile = '${flutterFrontendServerDirectory.absolute.path}/rebased_package_config.json';
+    String frontendServerPackageConfigJson = globals.fs.file(frontendServerPackageConfigJsonFile).readAsStringSync();
+    frontendServerPackageConfigJson = frontendServerPackageConfigJson.replaceAll('../../../third_party/dart/', dartSdkDir);
+    globals.fs.file(rebasedFrontendServerPackageConfigJsonFile).writeAsStringSync(frontendServerPackageConfigJson);
+
+    final List<String> commands = <String>[
+      globals.artifacts!.getHostArtifact(HostArtifact.engineDartBinary).path,
+      '--deterministic',
+      '--packages=$rebasedFrontendServerPackageConfigJsonFile',
+      '--snapshot=$hookFlutterFrontendServerSnapshot',
+      '--snapshot-kind=kernel',
+      '${flutterFrontendServerDirectory.absolute.path}/starter.dart'
+    ];
+    final ProcessResult processResult = await globals.processManager.run(commands);
+    final String dartToolPackageConfigFile = globals.fs.path.join(packagesPath, 'transform', '.dart_tool', 'package_config.json');
+    await globals.processManager.run(<String>['cp', '-rf', rebasedFrontendServerPackageConfigJsonFile, dartToolPackageConfigFile]);
+    globals.fs.file(rebasedFrontendServerPackageConfigJsonFile).deleteSync();
+    if (processResult.exitCode != 0 || !globals.fs.file(hookFlutterFrontendServerSnapshot).existsSync()) {
+      print('ConchFlutter fetchTransformSnapshot unexpected error: ${processResult.stderr.toString()}');
+      throwToolExit('ConchFlutter fetchTransformSnapshot unexpected error: ${processResult.stderr.toString()}');
+    }
+
+    if (!globals.fs.file(hookFlutterFrontendServerSnapshot).existsSync()) {
+      return null;
+    }
+
+    return hookFlutterFrontendServerSnapshot;
+  }
+}
-- 
2.32.1 (Apple Git-133)

